"use client";
import { useState } from "react";

const activeWalletLegendLabels = [
  {
    color: "accent-purple",
    name: "Only Bought",
    id: "active-wallet-only-bought",
  },
  {
    color: "accent-red",
    name: "Only Sold",
    id: "active-wallet-only-sold",
  },
  {
    color: "accent-green",
    name: "Bought and Sold",
    id: "active-wallet-bought-and-sold",
  },
];

const ActiveWallets = () => {
  const [activeWalletOnlyBoughtDisabled, setActiveWalletOnlyBoughtDisabled] =
    useState(false);
  const [activeWalletOnlySoldDisabled, setActiveWalletOnlySoldDisabled] =
    useState(false);
  const [
    activeWalletBoughtAndSoldDisabled,
    setActiveWalletBoughtAndSoldDisabled,
  ] = useState(false);

  const activeWalletOnClick = (e: string) => {
    if (document) {
      const domEls = document?.getElementsByTagName("input");
      for (let i = 0; i < domEls.length; i++) {
        if (domEls[i].id === e) {
          if (domEls[i].id === "active-wallet-only-bought") {
            setActiveWalletOnlyBoughtDisabled(!activeWalletOnlyBoughtDisabled);
          }
          if (domEls[i].id === "active-wallet-only-sold") {
            setActiveWalletOnlySoldDisabled(!activeWalletOnlySoldDisabled);
          }
          if (domEls[i].id === "active-wallet-bought-and-sold") {
            setActiveWalletBoughtAndSoldDisabled(
              !activeWalletBoughtAndSoldDisabled
            );
          }
        }
      }
    }
  };

  const [activeWalletTradersLabels, setActiveWalletTradersLabels] = useState(
    labels.slice(labels.length - 90).map((data: any) => data)
  );

  const [activeWalletOnlyBoughtDataArray, setActiveWalletOnlyBoughtDataArray] =
    useState(onlyBought.slice(onlyBought.length - 90));

  const [activeWalletOnlySoldDataArray, setActiveWalletOnlySoldDataArray] =
    useState(onlySold.slice(onlySold.length - 90));
  const [
    activeWalletBoughtAndSoldDataArray,
    setActiveWalletBoughtAndSoldDataArray,
  ] = useState(onlySold.slice(onlySold.length - 90));
  const [timeframe, setTimeframe] = useState<number>(90);

  function handleTrendlineTimeferame(e: React.MouseEvent, value: any) {
    e.preventDefault();
    setTimeframe(value);
  }

  // Active Wallets
  const [uniqueTotalBuyerSellerData, setuUniqueTotalBuyerSellerData] =
    useState(0);

  useEffect(() => {
    if (timeframe === 0) {
      setuUniqueTotalBuyerSellerData(activeWallets.all);

      setActiveWalletOnlyBoughtDataArray(onlyBought);
      setActiveWalletOnlySoldDataArray(onlySold);
      setActiveWalletBoughtAndSoldDataArray(boughtAndSold);
      setActiveWalletTradersLabels(labels);
    }
    if (timeframe === 1) {
      setuUniqueTotalBuyerSellerData(activeWallets.oneDay);

      setActiveWalletOnlyBoughtDataArray(
        onlyBought.slice(onlyBought.length - 1)
      );
      setActiveWalletOnlySoldDataArray(onlySold.slice(onlySold.length - 1));
      setActiveWalletBoughtAndSoldDataArray(
        boughtAndSold.slice(boughtAndSold.length - 1)
      );
      setActiveWalletTradersLabels(
        labels.slice(labels.length - 1).map((data: any) => data)
      );
    }

    if (timeframe === 7) {
      setuUniqueTotalBuyerSellerData(activeWallets.sevenDay);

      setActiveWalletOnlyBoughtDataArray(
        onlyBought.slice(onlyBought.length - 7)
      );
      setActiveWalletOnlySoldDataArray(onlySold.slice(onlySold.length - 7));
      setActiveWalletBoughtAndSoldDataArray(
        boughtAndSold.slice(boughtAndSold.length - 7)
      );
      setActiveWalletTradersLabels(
        labels.slice(labels.length - 7).map((data: any) => data)
      );
    }
    if (timeframe === 30) {
      setuUniqueTotalBuyerSellerData(activeWallets.thirtyDay);

      setActiveWalletOnlyBoughtDataArray(
        onlyBought.slice(onlyBought.length - 30)
      );
      setActiveWalletOnlySoldDataArray(onlySold.slice(onlySold.length - 30));
      setActiveWalletBoughtAndSoldDataArray(
        boughtAndSold.slice(boughtAndSold.length - 39)
      );
      setActiveWalletTradersLabels(
        labels.slice(labels.length - 30).map((data: any) => data)
      );
    }
    if (timeframe === 90) {
      setuUniqueTotalBuyerSellerData(activeWallets.ninetyDay);

      setActiveWalletOnlyBoughtDataArray(
        onlyBought.slice(onlyBought.length - 90)
      );
      setActiveWalletOnlySoldDataArray(onlySold.slice(onlySold.length - 90));
      setActiveWalletBoughtAndSoldDataArray(
        boughtAndSold.slice(boughtAndSold.length - 90)
      );
      setActiveWalletTradersLabels(
        labels.slice(labels.length - 90).map((data: any) => data)
      );
    }
  }, [timeframe]);
  return <div />;
};

export default ActiveWallets;
